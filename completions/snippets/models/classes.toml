
[[snippets]]
prefix = "Model"
detail = "class Model(models.Model)"
body = """
class ${1:Model}(models.Model):

    $0

    class Meta:
        verbose_name = _("${1:/downcase}")
        verbose_name_plural = _("${1:/downcase}${2:s}")

    def __str__(self):
        return self.${3:name}

    def get_absolute_url(self):
        return reverse("${1:/downcase}${4:_detail}", kwargs={"${5|pk,slug|}": self.$5})

"""

[[snippets]]
prefix = "modelmixin"
detail = "class Mixin(models.Model)"
body = """
class $1Mixin(models.Model):

    $0

    class Meta:
        abstract = True
"""
description = ""

[[snippets]]
prefix = "queryset"
detail = "class QuerySet(models.QuerySet)"
body = """
class $1QuerySet(models.QuerySet):
    pass
"""
description = ""

[[snippets]]
prefix = "manager"
detail = "class Manager(models.Manager)"
body = """
class $1Manager(models.Manager):
    def get_queryset(self):"
        return super().get_queryset().${2|filter,exclude,order_by,distinct,reverse|}($3)
"""
description = "Add extra Manager methods"

[[snippets]]
prefix = "queryset_from_manager"
detail = "class Manager(models.Manager)"
body = """
class $1Manager(models.Manager):
    def get_queryset(self):"
        return $1QuerySet(self.model, using=self._db)
}
"""
description = "Modify the initial QuerySet the Manager returns."