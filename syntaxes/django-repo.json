{
    "django-stuff": {
      "patterns": [{
          "begin": "{% comment ?(\"([\\w\\s])*\" )?%}",
          "end": "{% endcomment %}",
          "name": "comment.block.django"
        }, {
          "begin": "{#",
          "end": "#}",
          "name": "comment.line.number-sign.django"
        }, {
          "begin": "{{",
          "captures": {
            "0": {
              "name": "entity.tag.tagbraces.django"
            }
          },
          "end": "}}",
          "name": "storage.type.variable.django",
          "patterns": [{
              "include": "#django-template-filter"
          }]
        }, {
          "begin": "({%) (load) ",
          "captures": {
            "1": {
              "name": "entity.tag.tagbraces.django"
            },
            "2": {
              "name": "keyword.control.tag-name.django"
            }
          },
          "end": "(%})",
          "name": "storage.type.templatetag.django",
          "patterns": [{
              "include": "#django-template-tag-contrib"
            },
            {
              "include": "#django-template-filter"
          }]
        }, {
          "begin": "({%) (autoescape|endautoescape|block|endblock|blocktrans|endblocktrans|trans|plural|comment|endcomment|debug|extends|filter|firstof|for|empty|endfor|if|elif|else|endif|include|ifchanged|endifchanged|ifequal|endifequal|ifnotequal|endifnotequal|from|low|regroup|ssi|spaceless|endspaceless|templatetag|widthratio|with|endwith|csrf_token|cycle|url|verbatim|endverbatim|lorem|thumbnail|endthumbnail|get_static_prefix)\\b",
          "captures": {
            "1": {
              "name": "entity.tag.tagbraces.django"
            },
            "2": {
              "name": "keyword.control.tag-name.django"
            }
          },
          "end": "(%})",
          "name": "storage.type.templatetag.django",
          "patterns": [{
              "include": "#string-double-quoted"
          }, {
              "include": "#string-single-quoted"
          }, {
              "include": "#django-template-tag"
          }, {
              "include": "#django-template-filter"
          }]
        }, {
          "begin": "({%) ([a-zA-Z0-9_.]+) ",
          "captures": {
            "1": {
              "name": "entity.tag.tagbraces.django"
            },
            "2": {
              "name": "constant.other.tag.name.django"
            }
          },
          "end": "(%})",
          "name": "storage.type.customtemplatetag.django",
          "patterns": [{
              "include": "#string-double-quoted"
          }, {
              "include": "#string-single-quoted"
          }, {
              "include": "#django-template-tag"
          }, {
              "include": "#django-template-filter"
          }]
        }
      ]
    },
    "django-template-filter": {
      "patterns": [{
          "match": "(\\|) ?(add|addslashes|capfirst|center|cut|date|default|default_if_none|dictsort|dictsortreversed|divisibleby|escape|escapejs|filesizeformat|first|fix_ampersands|floatformat|force_escape|get_digit|iriencode|join|last|length|length_is|linebreaks|linebreaksbr|linenumbers|ljust|lower|make_list|phone2numeric|pluralize|pprint|random|removetags|rjust|safe|safeseq|slice|slugify|stringformat|striptags|time|timesince|timeutil|title|truncatewords|truncatewords_html|unordered_list|upper|urlencode|urlize|urlizetrunc|wordcount|wordwrap|yesno|apnumber|intcomma|intword|naturalday|ordinal|STATIC_PREFIX)\\b",
          "captures": {
            "1": {
              "name": "entity.tag.filter-pipe.django"
            },
            "2": {
              "name": "keyword.control.filter.django"
            }
          },
          "name": "entity.name.function.filter.django"
        }, {
          "match": "(\\|)([a-zA-Z0-9_]+)\\b",
          "captures": {
            "1": {
              "name": "entity.tag.filter-pipe.django"
            },
            "2": {
              "name": "constant.other.filter.django"
            }
          },
          "name": "entity.name.function.filter.django"
        }, {
          "match": ":",
          "name": "keyword.operator.filter-argument.django"
        }, {
          "match": "=",
          "name": "keyword.operator.assignment.django"
        }, {
          "match": "\\.",
          "name": "keyword.operator.getter.django"
        }, {
          "match": "[a-zA-Z0-9_]+",
          "name": "string.unquoted.tag-string.django"
        }, {
          "match": "(>=|>|==|!=|<|<=|and|or|is|not|in)",
          "name": "keyword.operator.condition.django"
        }, {
          "include": "#string-double-quoted"
        }, {
          "include": "#string-single-quoted"
      }]
    },
    "django-template-tag": {
      "patterns": [{
          "match": "\\b(and|or|not|in|by|as|asvar|trimmed|with)\\b",
          "name": "keyword.operator.django"
      }]
    },
    "django-template-tag-contrib": {
      "patterns": [{
          "match": "\\b(cache|i18n|l10n|static|tz|flatpages|humanize|admin_list|admin_modify|admin_static|admin_urls|base|log)\\b",
          "name": "constant.other.contrib.django"
      }]
    },
    "entities": {
      "patterns": [{
          "captures": {
            "1": {
              "name": "punctuation.definition.entity.html"
            },
            "3": {
              "name": "punctuation.definition.entity.html"
            }
          },
          "match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)",
          "name": "constant.character.entity.html"
        }, {
          "match": "&",
          "name": "invalid.illegal.bad-ampersand.html"
      }]
    },
    "string-double-quoted": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.html"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.html"
        }
      },
      "name": "string.quoted.double.html",
      "patterns": [{
          "include": "#django-stuff"
        }, {
          "include": "#entities"
      }]
    },
    "string-single-quoted": {
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.html"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.html"
        }
      },
      "name": "string.quoted.single.html",
      "patterns": [{
          "include": "#entities"
      }]
    },
    "tag-generic-attribute": {
      "match": "\\b([a-zA-Z\\-:]+)",
      "name": "entity.other.attribute-name.html"
    },
    "tag-id-attribute": {
      "begin": "\\b(id)\\b\\s*(=)",
      "captures": {
        "1": {
          "name": "entity.other.attribute-name.id.html"
        },
        "2": {
          "name": "punctuation.separator.key-value.html"
        }
      },
      "end": "(?<='|\")",
      "name": "meta.attribute-with-value.id.html",
      "patterns": [{
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.html"
            }
          },
          "contentName": "meta.toc-list.id.html",
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.html"
            }
          },
          "name": "string.quoted.double.html",
          "patterns": [{
              "include": "#entities"
          }]
        }, {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.html"
            }
          },
          "contentName": "meta.toc-list.id.html",
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.html"
            }
          },
          "name": "string.quoted.single.html",
          "patterns": [{
              "include": "#entities"
          }]
        }
      ]
    },
    "tag-stuff": {
      "patterns": [{
          "include": "#tag-id-attribute"
        }, {
          "include": "#tag-generic-attribute"
        }, {
          "include": "#string-double-quoted"
        }, {
          "include": "#string-single-quoted"
      }]
    }
}